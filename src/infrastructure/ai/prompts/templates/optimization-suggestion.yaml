id: optimization-suggestion
name: Container Optimization Suggestions
description: Provide optimization recommendations for Docker images and deployments
version: 1.0.0
system: |
  You are an expert in container optimization, focusing on:
  - Image size reduction
  - Build time optimization
  - Security hardening
  - Performance tuning
  - Cost optimization
  Provide specific, actionable recommendations with measurable impact.

user: |
  Analyze and provide optimization suggestions for this containerized application:
  
  {{#if dockerfile}}
  Current Dockerfile:
  ```dockerfile
  {{dockerfile}}
  ```
  {{/if}}
  
  {{#if imageInfo}}
  Image Information:
  - Size: {{imageSize}}
  - Layers: {{layerCount}}
  - Base Image: {{baseImage}}
  {{/if}}
  
  {{#if scanResults}}
  Security Scan Results:
  - Critical: {{criticalVulns}}
  - High: {{highVulns}}
  - Medium: {{mediumVulns}}
  {{/if}}
  
  Application Details:
  - Language: {{language}}
  - Framework: {{framework}}
  - Build System: {{buildSystem}}
  {{#if requirements}}
  - Requirements: {{requirements}}
  {{/if}}
  
  Provide optimization recommendations for:
  1. Image size reduction
  2. Build performance
  3. Security improvements
  4. Runtime performance
  5. Cost optimization

variables:
  - name: dockerfile
    description: Current Dockerfile to optimize
    required: false
  - name: imageSize
    description: Current image size
    required: false
    default: "unknown"
  - name: layerCount
    description: Number of layers in image
    required: false
  - name: baseImage
    description: Current base image
    required: false
  - name: criticalVulns
    description: Number of critical vulnerabilities
    required: false
    default: "0"
  - name: highVulns
    description: Number of high vulnerabilities
    required: false
    default: "0"
  - name: mediumVulns
    description: Number of medium vulnerabilities
    required: false
    default: "0"
  - name: language
    description: Programming language
    required: true
  - name: framework
    description: Application framework
    required: false
  - name: buildSystem
    description: Build system
    required: true
  - name: requirements
    description: Special requirements or constraints
    required: false

outputFormat: text

examples:
  - input:
      language: java
      framework: spring-boot
      buildSystem: maven
      imageSize: 850MB
      layerCount: 15
      baseImage: openjdk:11
    output: |
      ## Container Optimization Recommendations
      
      ### 1. Image Size Reduction (Potential: 60-70% reduction)
      
      **Current Issue**: Using full JDK image (850MB) when JRE would suffice
      
      **Recommendations**:
      - Switch to `eclipse-temurin:11-jre-alpine` (reduces ~500MB)
      - Use multi-stage build to exclude build tools from final image
      - Remove Maven cache and unnecessary files after build
      - Consider using `jlink` to create custom JRE (Java 11+)
      
      ```dockerfile
      # Optimized multi-stage build
      FROM maven:3.8-eclipse-temurin-11 AS builder
      WORKDIR /app
      COPY pom.xml .
      RUN mvn dependency:go-offline
      COPY src ./src
      RUN mvn package -DskipTests && \
          rm -rf /root/.m2
      
      FROM eclipse-temurin:11-jre-alpine
      RUN apk add --no-cache dumb-init
      WORKDIR /app
      COPY --from=builder /app/target/*.jar app.jar
      ENTRYPOINT ["dumb-init", "java", "-jar", "app.jar"]
      ```
      
      ### 2. Build Performance (Potential: 40-50% faster)
      
      **Improvements**:
      - Cache Maven dependencies in separate layer
      - Use BuildKit cache mounts for Maven repository
      - Parallel build with `-T 1C` flag
      - Use `.dockerignore` to exclude unnecessary files
      
      ### 3. Security Improvements
      
      **Critical Actions**:
      - Add non-root user: `RUN adduser -D -u 1000 appuser`
      - Update base image to latest patch version
      - Scan with Trivy/Snyk in CI pipeline
      - Use distroless images for production
      
      ### 4. Runtime Performance
      
      **JVM Optimizations**:
      - Set container-aware JVM flags: `-XX:MaxRAMPercentage=75.0`
      - Use G1GC for containers: `-XX:+UseG1GC`
      - Enable Class Data Sharing: `-XX:+UseAppCDS`
      - Implement proper health checks and readiness probes
      
      ### 5. Cost Optimization
      
      **Resource Efficiency**:
      - Right-size memory limits based on profiling
      - Use spot instances for non-critical workloads
      - Implement horizontal pod autoscaling
      - Consider ARM-based instances (Graviton) for 20-40% cost savings
      
      **Estimated Impact**:
      - Image size: 850MB → 250MB (70% reduction)
      - Build time: 5min → 2.5min (50% reduction)
      - Memory usage: 512MB → 384MB (25% reduction)
      - Monthly cost: $100 → $65 (35% reduction)

tags:
  - optimization
  - performance
  - security
  - cost-reduction